spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

spring.datasource.url=${VISION_DB_URL_STRING_N4}
spring.datasource.username=${VISION_DB_USER_NAME_N4}
spring.datasource.password=${VISION_DB_PASSWORD_N4}
app.databaseType=${VISION_DB_TYPE_N4}

app.serverType=JBOSS
app.enableDebug=Y

feed.upload.hostName=${VISION_FTP_HOSTNAME_N2}
feed.upload.port=${VISION_FTP_PORT_N2}
feed.upload.userName=${VISION_FTP_USERNAME_N2}
feed.upload.passWord=${VISION_FTP_PASSWORD_N2}
feed.upload.securedFtp=${VISION_FTP_SECURED_FLAG_N2}
feed.upload.serverType=${VISION_FTP_PASSWORD_ENCRYPT_TYPE_N2}
feed.upload.fileName=input
feed.upload.fileExtension=JSON
feed.upload.uploadDir=${VISION_FTP_FEED_UPLOAD_DIR_N2}
feed.upload.scriptDir=${VISION_FTP_FEED_UPLOAD_SCRIPT_DIR_N2}
feed.upload.localFilePath=${VISION_FTP_FEED_LOCAL_FILEPATH_N2}
ftp.sampleFeedDataDir=${VISION_FTP_FEED_SAMPLE_FEED_DIR_N2}
ftp.transSampleFileName=input
ftp.transSampleFileExtension=JSON
    
#Connection pooling properties(basic dbcp)
spring.datasource.dbcp2.initial-size=10
spring.datasource.dbcp2.max-total=50
spring.datasource.dbcp2.min-idle=10
spring.datasource.dbcp2.max-idle=20
spring.datasource.dbcp2.test-on-borrow=true
spring.datasource.dbcp2.remove-abandoned-on-borrow=true
spring.datasource.dbcp2.min-evictable-idle-time-millis=300000
spring.datasource.dbcp2.cache-state=false
spring.datasource.dbcp2.time-between-eviction-runs-millis=100000
spring.datasource.dbcp2.log-abandoned=false
spring.datasource.dbcp2.log-expired-connections=false

#---------------------------

#---------------------------
#VisionUpload Prop - Start
ftp.blockSize=4096
ftp.hostName=${VISION_FTP_HOSTNAME_N2}
ftp.userName=${VISION_FTP_USERNAME_N2}
ftp.password=${VISION_FTP_PASSWORD_N2}
ftp.xlUploadhostName=${VISION_FTP_HOSTNAME_N2}
ftp.xlUploaduserName=${VISION_FTP_USERNAME_N2}
ftp.xlUploadpassword=${VISION_FTP_PASSWORD_N2}
ftp.uploadDir=${VISION_FTP_XL_UPLOAD_DIR_N2}
ftp.downloadDir=${VISION_FTP_XL_DOWNLOAD_DIR_N2}
ftp.connectorTempFeedDir=${VISION_FTP_CONNECTOR_TEMP_FEED_DIR_N2}
ftp.connectorFeedDir=${VISION_FTP_CONNECTOR_FEED_DIR_N2}
ftp.transSampleOperationDir=${VISION_FTP_TRAN_SAMPLE_OPERATION_DIR_N2}
ftp.port=${VISION_FTP_PORT_N2}
ftp.sampleFeedDataSeparator=|
#VisionUpload Prop - End
#-----------------------
appName=/VisionBI

spring.mvc.dispatch-options-request=true
spring.servlet.multipart.max-file-size = 100MB
spring.servlet.multipart.max-request-size = 100MB
app.default.db.name=DEFAULT_VISION_DB
app.productName=ETL
app.clientName=ENBD
app.versionNo=V1.02
encryptor.password=${VISION_DB_PASSWORD_ENCRYPT_KEY_N4}

########################################################
#Applcation Properties
app.baseURL=${VISION_ETL_BASE_URL_N2}
app.allowed.paths=${app.baseURL}/saml,${app.baseURL}/login,${app.baseURL}/refreshToken,${app.baseURL}/supportController/putAPK,.gif,.swf,.png,.JPG,.ico,.css,.pdf,.js,.PNG,.GIF
app.allowed.urls=/login,/refreshToken
app.allowed.saml.urls=/refreshToken,/supportController/putAPK

#JWT Token Properties

vision.token.expiry=${VISION_ETL_APP_JWT_TOKEN_EXPIRY}
vision.refresh.token.expiry=${VISION_ETL_APP_REFRESH_TOKEN_EXPIRY}

#(Number of minutes*60)*2 [15*60*2]
vision.token.limit=${VISION_ETL_BEARER_TOKEN_LIMIT}
#(Number of products*(No. of hours*No. of bearer request per hour))*2 [(3*(72*4))*2]
vision.refresh.token.limit=${VISION_ETL_REFRESH_TOKEN_LIMIT}
token.encryption.flag=${VISION_ETL_TOKEN_ENCRYPTION_FLAG}

#Protocol for authentication (DEFAULT/SAML2/OAUTH/OPENID)
spring.profiles.active=${VISION_ETL_ACTIVE_PROFILE_SSO}

########################################################

########################################################
#DEFAULT authentication properties
#(LDAP/DB)
vision.default.auth.type=${VISION_ETL_DEFAULT_AUTH_TYPE}
vision.default.auth.adServers=${VISION_ETL_DEFAULT_AUTH_ADSERVERS}
#NATIVE / SKIP / SUNOIDA.COM

vision.token.secondary.validation=${VISION_ETL_TOKEN_SECONDARY_VALIDATION}
vision.token.ip.validation=${VISION_ETL_TOKEN_IP_VALIDATION}
vision.token.host.validation=${VISION_ETL_TOKEN_HOST_VALIDATION}
vision.token.mac.validation=${VISION_ETL_TOKEN_MAC_VALIDATION}
vision.concurrent.access.flag=${VISION_ETL_CONCURRENT_ACCESS_FLAG}

vision.inbound.public.key=${ETL_INBOUND_PUBLIC_KEY}
vision.inbound.private.key=${ETL_INBOUND_PRIVATE_KEY}
vision.outbound.public.key=${ETL_OUTBOUND_PUBLIC_KEY}
vision.outbound.private.key=${ETL_OUTBOUND_PRIVATE_KEY}

########################################################

########################################################
#SSO SAML2 Properties
sso.saml2.returnViewURL=${ETL_SSO_SAML2_RETURNVIEWURL}
sso.saml2.signonURL=${ETL_SSO_SAML2_SIGNONURL}
sso.saml2.baseLogoutURL=${ETL_SSO_SAML2_BASELOGOUTURL}
sso.saml2.logoutURL=${sso.saml2.baseLogoutURL}/login/signout?fromURI=${sso.saml2.signonURL}
sso.saml2.attributes.list=name,email
sso.saml2.user.name=${ETL_SSO_SAML2_USER_NAME}
sso.saml2.user.email=${ETL_SSO_SAML2_USER_EMAIL}

spring.security.saml2.relyingparty.registration.my-saml2.singlelogout.binding=${ETL_SAML2_SINGLELOGOUT_BINDING}
spring.security.saml2.relyingparty.registration.my-saml2.singlelogout.response-url=${ETL_SAML2_SINGLELOGOUT_RESPONSE_URL}
spring.security.saml2.relyingparty.registration.my-saml2.signing.credentials[0].private-key-location=${ETL_SAML2_SIGNING_CREDENTIALS_PRIVATE_KEY_LOCATION}
spring.security.saml2.relyingparty.registration.my-saml2.signing.credentials[0].certificate-location=${ETL_SAML2_SIGNING_CREDENTIALS_CERTIFICATE_LOCATION}
spring.security.saml2.relyingparty.registration.my-saml2.identityprovider.singlesignon.sign-request=${ETL_SAML2_IDENTITYPROVIDER_SINGLESIGNON_SIGN_REQUEST}
spring.security.saml2.relyingparty.registration.my-saml2.identityprovider.entity-id=${ETL_SAML2_IDENTITYPROVIDER_ENTITY_ID}
spring.security.saml2.relyingparty.registration.my-saml2.identityprovider.metadata-uri=${ETL_SAML2_IDENTITYPROVIDER_METADATA_URI}

########################################################

spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER
vision.allowed.origin=${VISION_ETL_ALLOWED_ORIGIN}
vision.jwt.secret.key=${VISION_ETL_JWT_SECRET_KEY}
vision.native.pwd.reset.days=${VISION_ETL_NATIVE_PWD_RESET_DAYS}
vision.login.failed.limit=${VISION_ETL_LOGIN_FAILED_LIMIT}

sunoida.license.file.hash.key=YourSecretKeyHere
